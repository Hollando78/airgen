services:
  traefik:
    image: traefik:v3.1
    command:
      - --api.dashboard=true
      - --providers.docker=true
      - --entrypoints.web.address=:80
    ports:
      - "${TRAEFIK_HTTP_PORT}:80"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=PathPrefix(`/traefik`)"
      - "traefik.http.routers.traefik.service=api@internal"

  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT}:6379"

  neo4j:
    image: neo4j:5.25
    environment:
      NEO4J_AUTH: "${GRAPH_USERNAME}/${GRAPH_PASSWORD}"
    ports:
      - "${GRAPH_BOLT_PORT:-7687}:7687"
      - "${GRAPH_HTTP_PORT:-7474}:7474"
    volumes:
      - neo4jdata:/data
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:7474 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  api:
    build:
      context: .
      dockerfile: backend/Dockerfile
    ports:
      - "${API_PORT}:${API_PORT}"
    environment:
      API_HOST: ${API_HOST:-0.0.0.0}
      API_PORT: ${API_PORT}
      API_JWT_SECRET: ${API_JWT_SECRET}
      API_ENV: ${API_ENV}
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}"
      REDIS_URL: "redis://redis:6379"
      WORKSPACE_ROOT: /workspace
      AI_DRAFT_LIMIT: ${AI_DRAFT_LIMIT:-5}
      AI_DRAFT_CACHE_TTL: ${AI_DRAFT_CACHE_TTL:-900}
      GRAPH_URL: bolt://neo4j:7687
      GRAPH_USERNAME: ${GRAPH_USERNAME}
      GRAPH_PASSWORD: ${GRAPH_PASSWORD}
      GRAPH_DATABASE: ${GRAPH_DATABASE:-neo4j}
      GRAPH_ENCRYPTED: ${GRAPH_ENCRYPTED:-false}
      LLM_PROVIDER: "${LLM_PROVIDER}"
      LLM_API_KEY: "${LLM_API_KEY}"
      OPENAI_API_KEY: "${LLM_API_KEY}"
      LLM_MODEL: "${LLM_MODEL:-gpt-4o-mini}"
      LLM_BASE_URL: "${LLM_BASE_URL}"
      LLM_TEMPERATURE: "${LLM_TEMPERATURE:-0.2}"
    depends_on:
      postgres:
        condition: service_started
      redis:
        condition: service_started
      neo4j:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=PathPrefix(`/api`)"
      - "traefik.http.routers.api.entrypoints=web"
      - "traefik.http.services.api.loadbalancer.server.port=${API_PORT}"
      - "traefik.http.middlewares.api-strip.stripprefix.prefixes=/api"
      - "traefik.http.routers.api.middlewares=api-strip@docker"
    volumes:
      - ./workspace:/workspace

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=PathPrefix(`/`)"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.routers.frontend.priority=1"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
    depends_on:
      - api

volumes:
  pgdata:
  neo4jdata:
